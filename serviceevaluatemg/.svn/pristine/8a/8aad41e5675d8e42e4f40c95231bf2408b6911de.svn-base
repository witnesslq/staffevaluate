package com.app.action;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.FileUtils;
import org.apache.struts2.ServletActionContext;

import com.app.entity.Post;
import com.app.entity.Role;
import com.app.entity.Staff;
import com.app.entity.Subindex;
import com.app.entity.UserCookie;
import com.app.service.PostService;
import com.app.service.RoleService;
import com.app.service.StaffService;
import com.app.service.SubindexService;
/**
 * 
 * @author 邢昭武
 * 
 * 员工action类
 *
 */
public class StaffAction extends SuperAction {
	private Staff staff;
	private StaffService staffService;
	private SubindexService subindexService;
	private RoleService roleService;
	private PostService postService;
	private String satisfaction;
	private String ids;
	private String roleid;
	private String postid;
	List<Post> postList;
	List<Role> roleList;
	List<Subindex> sbuindexList;
	
	
	public List<Subindex> getSbuindexList() {
		return sbuindexList;
	}

	public void setSbuindexList(List<Subindex> sbuindexList) {
		this.sbuindexList = sbuindexList;
	}

	public RoleService getRoleService() {
		return roleService;
	}

	public void setRoleService(RoleService roleService) {
		this.roleService = roleService;
	}

	public PostService getPostService() {
		return postService;
	}

	public void setPostService(PostService postService) {
		this.postService = postService;
	}

	public String getRoleid() {
		return roleid;
	}

	public void setRoleid(String roleid) {
		this.roleid = roleid;
	}

	public String getPostid() {
		return postid;
	}

	public void setPostid(String postid) {
		this.postid = postid;
	}

	public List<Post> getPostList() {
		return postList;
	}

	public void setPostList(List<Post> postList) {
		this.postList = postList;
	}

	public List<Role> getRoleList() {
		return roleList;
	}

	public void setRoleList(List<Role> roleList) {
		this.roleList = roleList;
	}

	public String getIds() {
		return ids;
	}

	public void setIds(String ids) {
		this.ids = ids;
	}

	public String getSatisfaction() {
		return satisfaction;
	}

	public void setSatisfaction(String satisfaction) {
		this.satisfaction = satisfaction;
	}

	List<Subindex> listSubindex;

	public List<Subindex> getListSubindex() {
		return listSubindex;
	}

	public void setListSubindex(List<Subindex> listSubindex) {
		this.listSubindex = listSubindex;
	}

	public SubindexService getSubindexService() {
		return subindexService;
	}

	public void setSubindexService(SubindexService subindexService) {
		this.subindexService = subindexService;
	}

	private Integer id;
	private File upload;
	private String uploadContentType;
	private String uploadFileName;
	private String result;

	public File getUpload() {
		return upload;
	}

	public void setUpload(File upload) {
		this.upload = upload;
	}

	public String getUploadContentType() {
		return uploadContentType;
	}

	public void setUploadContentType(String uploadContentType) {
		this.uploadContentType = uploadContentType;
	}

	public String getUploadFileName() {
		return uploadFileName;
	}

	public void setUploadFileName(String uploadFileName) {
		this.uploadFileName = uploadFileName;
	}

	public String getResult() {
		return result;
	}

	public void setResult(String result) {
		this.result = result;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	private String username;
	private String password;

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Staff getStaff() {
		return staff;
	}

	public void setStaff(Staff staff) {
		this.staff = staff;
	}

	public StaffService getStaffService() {
		return staffService;
	}

	public void setStaffService(StaffService staffService) {
		this.staffService = staffService;
	}

	public String add() throws Exception {
		
		String path = ServletActionContext.getServletContext().getRealPath("/upload");
		System.out.println("--------------------------------"+path);
		File file = new File(path);
		if (!file.exists()) {
			file.mkdir();
		}
		if(upload != null){
			FileUtils.copyFile(upload, new File(file,uploadFileName));
			staff.setPhoto("upload" + "/" + uploadFileName);
	//		staff.setSex('1');
			String maxId = staffService.getNewStaffId();
			staff.setStaff_no(maxId);
			staff.setPassword("123456");
		}else{
			if('男' == staff.getSex()){
				staff.setPhoto("images" + "/" + "nan.ico");
			}else if('女'== staff.getSex()){
				staff.setPhoto("images" + "/" + "nv.ico");
			}
			String maxId = staffService.getNewStaffId();
			staff.setStaff_no(maxId);
			staff.setPassword("123456");
		}
		result = "上传成功";
		if (staffService.addStaff(staff)) {
			return "add";
		}
		return "error";
	}

	public String list() throws Exception {
		List<Staff> listStaff = staffService.getAllStaff();
		for (Staff s : listStaff) {
			System.out.println(s.toString());
		}
		request.setAttribute("listStaff", listStaff);
		return "list";
	}

	public String listP() {

		int staffCount = 0;
		try {
			staffCount = staffService.getStaffCount();
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		// ActionMessages errors=new ActionMessages();
		if (staffCount < 1) {
			// errors.add("staffCount",new ActionMessage("staffCount.null"));
			// mapping.findForward("success");
		}
		int pageCount = staffService.getPageCount(staffCount, staffService.STAFF_PAGE_SIZE);
		int pageNo;
		if (request.getParameter("pageNo") == null || request.getParameter("pageNo").trim().equals("")) {
			pageNo = 1;
		}
		try {
			pageNo = Integer.parseInt(request.getParameter("pageNo").trim());
		} catch (Exception e) {
			pageNo = 1;
		}
		if (pageNo > pageCount) {
			pageNo = pageCount;
		}
		request.setAttribute("pageCount", pageCount);
		request.setAttribute("currentPage", pageNo);
		try {
			request.setAttribute("listStaff", staffService.listStaff(pageNo));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return "error";
		}
		listSubindex = subindexService.findAllSubindex();
		return "listP";
	}

	public String getStaffById() throws Exception {
		staff = staffService.getStaff(id);
		return "get";
	}

	private void addCookie(String name, String value, int timeLong) {
		Cookie cookie = new Cookie(name, value);
		cookie.setMaxAge(timeLong);
		ServletActionContext.getResponse().addCookie(cookie);
	}

	/**
	 * Cookie 取得
	 * 
	 * @return
	 * @throws Exception
	 */
	private String getCookie(String name) {
		HttpServletRequest request = ServletActionContext.getRequest();
		Cookie[] cookies = request.getCookies();
		if (cookies != null) {
			for (Cookie cookie : cookies) {
				if (cookie.getName().equals(name)) {
					return cookie.getValue();
				}
			}
		}
		return null;
	}

	public String login() throws Exception {
		System.out.println("---------------------进入loginaction-----------------");
		Staff staff = (Staff) request.getSession().getAttribute("user");
		if (staff != null) {
			return "login";
		}
		String rememberMe = request.getParameter("rember");
		if (rememberMe != null) {
			if (!username.equals("") && !password.equals("")) {
				// 创建Cookie
				System.out.println("username:---------------------" + URLEncoder.encode(username, "utf8"));
				String userinfo = URLEncoder.encode(username, "utf8") + "," + password;
				Cookie userCookies = new Cookie("userCookies", userinfo);
				userCookies.setMaxAge(60 * 60 * 24 * 60);// 周期是60天
				response.addCookie(userCookies);
			}
		}
		List<Staff> list = staffService.getStaffByUserAndPassword(username, password);
		if (list != null && list.size() > 0) {
			Staff staff1 = list.get(0);
			System.out.println(list.get(0).toString());
			request.getSession().setAttribute("user", staff1);
			return "login";

		}
		request.setAttribute("loginError", "用户名密码不合法,请重新出入");
		request.setAttribute("username", username);
		return "loginError";

	}

	public String loginform() throws UnsupportedEncodingException {
		List<UserCookie> userCookies = new ArrayList<UserCookie>();
		HttpServletRequest request = ServletActionContext.getRequest();
		System.out.println("ip地址1：-------------" + request.getRemoteAddr());
		System.out.println("ip地址1：-------------" + request.getHeader("X-Real-IP"));
		System.out.println("ip地址1：-------------" + request.getHeader("WL-Proxy-Client-IP"));
		System.out.println("ip地址1：-------------" + request.getHeader("WL-Proxy-Client-IP"));
		System.out.println("ip地址1：-------------" + request.getHeader("Proxy-Client-IP"));
		String ipAddress = getIpAddr(request);
		Cookie[] cookies = request.getCookies();
		request.getSession().setAttribute("ipAddress", "IP:" + ipAddress);
		if (cookies != null) {
			for (Cookie c : cookies) {
				System.out.println(c.getName() + "-----" + c.getValue());

				if (c.getName().equals("userCookies")) {

					String str = URLDecoder.decode(c.getValue(), "utf-8");
					request.setAttribute("data", str);
				}

			}

		}

		// request.setAttribute("userCookies", userCookies);
		return "loginform";
	}

	public String getIpAddr(HttpServletRequest request) {
		String ip = request.getHeader("x-forwarded-for");
		if (null == ip || 0 == ip.length() || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("Proxy-Client-IP");
		}
		if (null == ip || 0 == ip.length() || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("WL-Proxy-Client-IP");
		}
		if (null == ip || 0 == ip.length() || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("X-Real-IP");
		}
		if (null == ip || 0 == ip.length() || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getRemoteAddr();
		}
		return ip;
	}

	public String getOne() {
		String idStr = request.getParameter("id");
		listSubindex = subindexService.findAllSubindex();
		int id = Integer.parseInt(idStr);
		staff = staffService.getStaff(id);
		return "getOne";
	}

	/**
	 * 也是getOne,只不过result不一样
	 * 
	 * @return
	 */
	public String getNamePic() {
		String idStr = request.getParameter("id");
		if (ids.length() >= 1) {
			ids = ids.substring(0, ids.length() - 1);
		}
		int id = Integer.parseInt(idStr);
		staff = staffService.getStaff(id);
		listSubindex = subindexService.getByIds(ids);
		System.out.println(listSubindex);
		return "getNamePic";
	}
	
	public String getRolesAndPosts(){
		postList = postService.findAllPost();
		roleList = roleService.findAllRole();
		return "getRolesAndPosts";
		
	}
	
	
	
}
